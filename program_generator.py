import numpy as np

class ProgramGenerator:
    def __init__(self, samples):
        self.contents = ""
        self.samples = samples.values()
    
    def calc_env_val(self, val1, val2, max_val):
        return np.round((val2-val1)/max_val,3)

    def filter_offsets(self, offsets, sample_len):
        included = [offsets[0]]
        not_included = []
        #print(offsets)
        for i in range(1, len(offsets)):
            #print(offsets[i]-included[-1])
            if offsets[i] - included[-1] < sample_len:
                not_included.append(offsets[i])
            else:
                included.append(offsets[i])
        return included, not_included
    
    def gen_file(self):
        for i,s in enumerate(self.samples):
            #print(s.offsets)
            next_offsets = np.sort(np.unique(np.round(s.offsets,2)))
            if s.checked:
                start = self.calc_env_val(0,s.start[0], s.max_time)
                attack = self.calc_env_val(s.start[0], s.attack[0], s.max_time)
                decay = self.calc_env_val(s.attack[0], s.decay[0], s.max_time)
                sustain = self.calc_env_val(s.decay[0], s.sustain[0], s.max_time)
                release = self.calc_env_val(s.sustain[0], s.release[0], s.max_time)
                attack_level = self.calc_env_val(s.start[1], s.attack[1], s.max_vol)
                decay_level = self.calc_env_val(s.start[1], s.decay[1], s.max_vol)
                sustain_level = self.calc_env_val(s.start[1], s.sustain[1], s.max_vol)
                full_path = "C:/Users/uno4e/OneDrive/Documents/Cambridge II/project/" + s.file_path
                self.contents += f"sample{i}='{full_path}'\n"
                loop = 0
                name = s.name.split(".")[0]
                #print(s.max_time)
                while len(next_offsets) > 0:
                    included_offsets, next_offsets = self.filter_offsets(next_offsets, s.max_time)
                    id = f"_{i}_{name}_{loop}"
                    offsets_str = (",").join(map(str, included_offsets)) + "," + str(np.max(s.corr[0]))
                    self.contents += f"offsets{id} = (ring {offsets_str}) \nj{id} = 0\nlive_loop :loop{id} do \n\tif offsets{id}[j{id}] > offsets{id}[j{id}-1]\n\t\tsleep offsets{id}[j{id}] - offsets{id}[j{id}-1]\n\telse\n\t\tsleep offsets{id}[j{id}]\n\tend\n\tif offsets{id}[j{id}] != offsets{id}[-1]\n\t\tsample sample{i}, start: {start}, attack: {attack}, attack_level: {attack_level}, decay: {decay}, decay_level: {decay_level}, sustain: {sustain}, sustain_level: {sustain_level}, release: {release} \n\tend\n\tj{id} += 1\nend\n"
                    loop += 1
        #print(self.contents)
        #"C:\Users\uno4e\OneDrive\Documents\Cambridge II\project\papers\drum_bass_threads.rb"
        f = open("generated_track.rb", "w")
        f.write(self.contents)
        f.close()
        print("done")


"""
play 60, attack: 0.1, attack_level: 0.1, decay: 0.2, decay_level: 1,
  sustain: 0.5, sustain_level: 0.8, release: 1.5
offsets0 = (ring 5.04, 5.06, 5.08, 5.1, 5.12, 5.14, 5.4, 5.42, 5.44, 5.46, 5.48, 5.49, 5.51, 5.53, 5.77, 5.79, 5.81, 5.83, 5.85, 5.87, 5.89, 5.91, 6.15, 6.17, 6.19, 6.21, 6.23, 6.25, 6.27, 6.29, 6.53, 6.55, 6.56, 6.58, 6.6, 6.62, 6.64, 6.66, 6.9, 6.92, 6.94, 6.96, 6.98, 7.0, 7.02, 7.04, 7.28, 7.29, 7.31, 7.33, 7.35, 7.37, 7.39, 7.41, 7.65, 7.67, 7.69, 7.71, 7.73, 7.75, 7.77, 7.79, 8.03, 8.04, 8.06, 8.08, 8.1, 8.12, 8.14, 8.16, 8.4, 8.42, 8.44, 8.46, 8.48, 8.5, 8.52, 8.54, 8.78, 8.8, 8.82, 8.83, 8.85, 8.87, 8.89, 8.91, 9.15, 9.17, 9.19, 9.21, 9.23, 9.25, 9.27, 9.29, 9.53, 9.55, 9.56, 9.58, 9.6, 9.62, 9.64, 9.66, 9.9, 9.92, 9.94, 9.96, 9.98, 10.0, 10.02, 10.04, 10.28, 10.29, 10.31, 10.33, 10.35, 10.37, 10.39, 10.41, 10.65, 10.67, 10.69, 10.71, 10.73, 10.75, 10.77, 10.79, 11.03, 11.05, 11.06, 11.08, 11.1, 11.12, 11.14, 11.16, 11.4, 11.42, 11.44, 11.46, 11.48, 11.5, 11.52, 11.54, 11.78, 11.8, 11.82, 11.83, 11.85, 11.87, 11.89, 11.91, 12.15, 12.17, 12.19, 12.21, 12.23, 12.25, 12.27, 12.29, 12.53, 12.54, 12.56, 12.58, 12.6, 12.62, 12.64, 12.66, 12.9, 12.92, 12.94, 12.96, 12.98, 13.0, 13.02, 13.04, 13.28, 13.3, 13.31, 13.33, 13.35, 13.37, 13.39, 13.41, 13.65, 13.67, 13.69, 13.71, 13.73, 13.75, 13.77, 13.79, 14.03, 14.05, 14.06, 14.08, 14.1, 14.12, 14.14, 14.16, 14.4, 14.42, 14.44, 14.46, 14.48, 14.5, 14.52, 14.54, 14.78, 14.79, 14.81, 14.83, 14.85, 14.87, 14.89, 14.91, 15.15, 15.17, 15.19, 15.21, 15.23, 15.25, 15.27, 15.29, 15.53, 15.55, 15.56, 15.58, 15.6, 15.62, 15.64, 15.66, 15.92, 15.94, 15.96, 15.98, 16.0, 16.02, 16.33, 17.06, 17.08, 17.1, 17.12, 17.4, 17.42, 17.44, 17.46, 17.48, 17.5, 17.51, 17.53, 17.76, 17.78, 17.79, 17.81, 17.83, 17.85, 17.87, 17.89, 17.91, 18.13, 18.15, 18.17, 18.19, 18.21, 18.23, 18.25, 18.27, 18.29, 18.51, 18.53, 18.55, 18.56, 18.58, 18.6, 18.62, 18.64, 18.66, 18.88, 18.9, 18.92, 18.94, 18.96, 18.98, 19.0, 19.02, 19.04, 19.26, 19.28, 19.3, 19.32, 19.33, 19.35, 19.37, 19.39, 19.41, 19.65, 19.67, 19.69, 19.71, 19.73, 19.75, 19.77, 19.79, 20.03, 20.04, 20.06, 20.08, 20.1, 20.12, 20.14, 20.16, 20.4, 20.42, 20.44, 20.46, 20.48, 20.5, 20.52, 20.54, 20.78, 20.8, 20.81, 20.83, 20.85, 20.87, 20.89, 20.91, 21.15, 21.17, 21.19, 21.21, 21.23, 21.25, 21.27, 21.29, 21.53, 21.55, 21.56, 21.58, 21.6, 21.62, 21.64, 21.66, 21.9, 21.92, 21.94, 21.96, 21.98, 22.0, 22.02, 22.04, 22.28, 22.29, 22.31, 22.33, 22.35, 22.37, 22.39, 22.41, 22.65, 22.67, 22.69, 22.71, 22.73, 22.75, 22.77, 22.79, 23.03, 23.05, 23.06, 23.08, 23.1, 23.12, 23.14, 23.16, 23.4, 23.42, 23.44, 23.46, 23.48, 23.5, 23.52, 23.54, 23.78, 23.8, 23.82, 23.83, 23.85, 23.87, 23.89, 23.91, 24.15, 24.17, 24.19, 24.21, 24.23, 24.25, 24.27, 24.29, 24.53, 24.55, 24.56, 24.58, 24.6, 24.62, 24.64, 24.66, 24.9, 24.92, 24.94, 24.96, 24.98, 25.0, 25.02, 25.04, 25.28, 25.29, 25.31, 25.33, 25.35, 25.37, 25.39, 25.41, 25.65, 25.67, 25.69, 25.71, 25.73, 25.75, 25.77, 25.79, 26.03, 26.05, 26.06, 26.08, 26.1, 26.12, 26.14, 26.16, 26.4, 26.42, 26.44, 26.46, 26.48, 26.5, 26.52, 26.54, 26.78, 26.8, 26.81, 26.83, 26.85, 26.87, 26.89, 26.91, 27.15, 27.17, 27.19, 27.21, 27.23, 27.25, 27.27, 27.29, 27.53, 27.54, 27.56, 27.58, 27.6, 27.62, 27.64, 27.66, 27.9, 27.92, 27.94, 27.96, 27.98, 28.0, 28.02, 28.04, 28.28, 28.3, 28.31, 28.33, 28.35, 28.37, 28.39, 28.41, 28.65, 28.67, 28.69, 28.71, 28.73, 28.75, 28.77, 28.79, 29.03, 29.05, 29.06, 29.08, 29.1, 29.12, 29.14, 29.16, 29.4, 29.42, 29.44, 29.46, 29.48, 29.5, 29.52, 29.54, 29.78, 29.79, 29.81, 29.83, 29.85, 29.87, 29.89, 29.91, 30.15, 30.17, 30.19, 30.21, 30.23, 30.25, 30.27, 30.29, 30.53, 30.55, 30.56, 30.58, 30.6, 30.62, 30.64, 30.66, 30.88, 30.9, 30.92, 30.94, 30.96, 30.98, 31.0, 31.02, 31.04, 31.06, 31.26, 31.28, 31.3, 31.31, 31.33, 31.35, 31.37, 31.39, 31.41, 31.65, 31.67, 31.69, 31.71, 31.73, 31.75, 31.77, 31.79, 32.03, 32.05, 32.06, 32.08, 32.1, 32.12, 32.14, 32.16, 32.4, 32.42, 32.44, 32.46, 32.48, 32.5, 32.52, 32.54, 32.78, 32.79, 32.81, 32.83, 32.85, 32.87, 32.89, 32.91, 33.15, 33.17, 33.19, 33.21, 33.23, 33.25, 33.27, 33.29, 33.53, 33.55, 33.57, 33.58, 33.6, 33.62, 33.64, 33.66, 33.88, 33.9, 33.92, 33.94, 33.96, 33.98, 34.0, 34.02, 34.04, 34.26, 34.28, 34.3, 34.32, 34.33, 34.35, 34.37, 34.39, 34.41, 34.65, 34.67, 34.69, 34.71, 34.73, 34.75, 34.77, 34.79, 35.03, 35.05, 35.06, 35.08, 35.1, 35.12, 35.14, 35.16, 35.4, 35.42, 35.44, 35.46, 35.48, 35.5, 35.52, 35.54, 35.78, 35.8, 35.81, 35.83, 35.85, 35.87, 35.89, 35.91, 36.15, 36.17, 36.19, 36.21, 36.23, 36.25, 36.27, 36.29, 36.53, 36.55, 36.56, 36.58, 36.6, 36.62, 36.64, 36.66, 36.9, 36.92, 36.94, 36.96, 36.98, 37.0, 37.02, 37.04, 37.28, 37.3, 37.31, 37.33, 37.35, 37.37, 37.39, 37.41, 37.67, 37.69, 37.71, 37.73, 37.75, 37.77, 38.08, track_len)

i = 0


loop do
  if offsets0[i] > offsets0[i-1]
    sleep offsets0[i]-offsets0[i-1]
  else
    sleep offsets0[i]
  end
  i += 1
  if offsets0[i] != track_len
    sample sample_0, amp: 50
  end
end
"""